using Microsoft.Extensions.AI;

namespace AiCalendar.Api.Services
{
    public class MockChatClient : IChatClient
    {
        public ChatClientMetadata Metadata { get; } = new("mock-client", null, null);

        public void Dispose() { }

        public Task<ChatResponse> GetResponseAsync(IEnumerable<ChatMessage> chatMessages, ChatOptions? options = null, CancellationToken cancellationToken = default)
        {
            // Make it very obvious this is a mock response
            var userMessage = chatMessages.LastOrDefault()?.Text ?? "";
            
            // If it's a simple test, return a clear mock identifier
            if (userMessage.ToLower().Contains("hello") || userMessage.Length < 20)
            {
                var mockTestResponse = "MOCK_CHAT_CLIENT_RESPONSE - This is clearly from the MockChatClient fallback, not Ollama";
                var testResponseMessage = new ChatMessage(ChatRole.Assistant, mockTestResponse);
                return Task.FromResult(new ChatResponse([testResponseMessage]));
            }

            // For calendar requests, return structured JSON but mark it as mock
            var mockJsonResponse = @"{
                ""intent"": ""create"",
                ""confidence"": 0.95,
                ""extracted_event"": {
                    ""title"": ""MOCK: Meeting with Bob (Generated by MockChatClient)"",
                    ""start"": ""2025-09-15T14:00:00Z"",
                    ""end"": ""2025-09-15T15:00:00Z"",
                    ""timezone"": ""UTC"",
                    ""location"": ""MOCK: Conference room""
                },
                ""missing_fields"": [],
                ""tool_to_call"": ""calendar.save_event""
            }";

            var responseMessage = new ChatMessage(ChatRole.Assistant, mockJsonResponse);
            var response = new ChatResponse([responseMessage]);
            
            return Task.FromResult(response);
        }

        public IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(IEnumerable<ChatMessage> chatMessages, ChatOptions? options = null, CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        public object? GetService(Type serviceType, object? serviceKey = null)
        {
            return null;
        }
    }
}